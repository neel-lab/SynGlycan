function searchspectra(input,msdata,triggerdata,allpepdata,statusreporthandles,...
    groupstodo,allfragments,scoreoptions)
% SEARCHSPECTRA: match MS2 spectra against user provided glycopeptide
%     candidates.
%
% Syntax:
% searchspectra(input,msdata,triggerdata,numpw,allpepdata,...
%     statusreporthandles,scoreoptions)
%
% Input:
% input: structure. Information necessary for scoring. Same as parent
%     function's.
% msdata: structure. Experiment data. Same as parent function's.
% triggerdata: structure. Scan number association in HCD trigger
%     experiment. Fields are:
%         SASSO: n x m numerical array. Scan numbers and parent MS1 scan
%             retention time. For each row, the first n - 2 scans'
%             fragmentation methods are defined in field "colnames", the
%             second to last number is the parent MS1 scan number, the last
%             number is the retention time of it.
%         colnames: 1 x n cell array of strings. The fragmentation methods
%             of the MS2 scans.
% allpepdata: structure. The information in digested glycopeptide file. See
%     DIGESTFILEANALY for details.
% statusreporthandles: structure. The handle of scoregui. This is the
%     channel to the textbox which provides realtime status update.
% scoreoptions: structure. Settings and parameters for scoring. The fields
%     are :
% ---------------------------------------------------------------------------------------------------------------------------------------------------
%     Field name                        Format                                 Description
%     analyzefragmode            n x 1 cell array of              The fragmentation modes to be analyzed.
%                                                      strings
%     assemblegpmode           Double                                 Controls working mode of function ASSEMBLEGP, See the
%                                                                                                      function's document for detail.
%     doparallel                          Logical                                  Enable parallel computing mode or not.
%     userpepiontyp                 n x 1 cell array of              Peptide ion types to be considered for each fragmentation mode.
%                                                      strings.
%     (Below are identical to the fields of "input" in parent function, see SCOREALLSPECTRA for detail.)
%     ms1tol
%     ms1tolunit
%     ms2tol
%     ms2tolunit
%     minmaxmz
%     maxlag
%     cutoffmed
%     fracmax
%     fragnum
%     selectpeak
%     numprotperworker
%     monosacislabile
%     simultaneousfrag
%     addoxoniumion
%     isHCDtrigger
%     maxstublen
%     presearch
%     presearchtopprotnum
%     resumeprevsearch
%     analyzetgt
% ---------------------------------------------------------------------------------------------------------------------------------------------------
%
% Output:
% Scoring results are saved as .mat files. Each file contains 2 fields:
%     "scoreintdata" and "result". "scoreintdata" is a structure containing
%     user settings and intermediate data. These data are useful when
%     browsing the results. "result" is a 1 x n structure where scoring
%     results were stored. See SAVESCORERESULTS for details about
%     "scoreintdata". See MATCH1BY1 for details about "result".
%
% Note:
% N/A
%
% Example:
% N/A. Use provided sample data to perform a complete scoring process, set
%     breaking points to see how this function works.
%
% Children function:
% N/A
%
% See Also:
% SCOREALLSPECTRA THEOPTMFRAG FINDMS1MATCH MATCHSPECTRA SAVESCORERESULTS

% GlycoPAT 2 authors: Kai Cheng, Gang Liu, Gabrielle Pawlowski, Yusen Zhou, Sriram Neelamegham
% (c) 2020, Research Foundation for State University of New York. All rights reserved
% Date Lastly Updated: 04/01/2020

if ~isempty(statusreporthandles)
    statusstr = get(statusreporthandles.edit_statusreport, 'String');
end

% Experiment data
scannum = msdata.scannum;
charge = msdata.charge;
precmz = msdata.precursormz;
fragmodes = msdata.fragmode;
precmass   = (precmz - 1.007825032).*charge;
doparallel = scoreoptions.doparallel;

% Result storage
outputdir = input.outputdir;
outputfilename = input.outputfname;
ptmstruct = allpepdata.ptminfo.mod;
uniptmstring = '';
for ii = 1:length(ptmstruct)
    uniptmstring = [uniptmstring,ptmstruct{ii}];
end
uniptmstring = unique(uniptmstring);
uniptmstring = setdiff(uniptmstring,'<>{}');
ptmcomp = zeros(length(ptmstruct),length(uniptmstring));
for ii = 1:length(ptmstruct)
    for jj = 1:length(uniptmstring)
        ptmcomp(ii,jj) = length(strfind(ptmstruct{ii},uniptmstring(jj)));
    end
end
[~,uniptmcompind,uniptmcompind2] = unique(ptmcomp,'rows');
tempptmisomers = cell(max(uniptmcompind2),1);
for ii = 1:max(uniptmcompind2)
    tempptmisomers{ii} = ptmstruct(uniptmcompind2 == ii);
end
ptmisomers = cell(max(uniptmcompind2),max(cellfun(@length,tempptmisomers)));
for ii = 1:max(uniptmcompind2)
    tempuniptmisomers = tempptmisomers{ii};
    ptmisomers(ii,1:length(tempuniptmisomers)) = tempuniptmisomers;
end
% Generate all theoretical fragments of PTMs. Later they will be combined
%     with peptide fragments to build glycopeptide fragments.
ptmfragnums = scoreoptions.fragnum(:,2);
PTM.ptmseq = ptmisomers(:,1);
ptmisomers_afmpos = zeros(size(PTM.ptmseq));
for ii = 1:length(ptmisomers_afmpos) %start at 2 to skip <i>
    ptmisomers_afmpos(ii) = find(ismember(allfragments.ptmseq,ptmisomers{ii,1}));
end
PTM.ptmmass = allfragments.ptmmass(ptmisomers_afmpos);
PTM.ptmmassfix = allfragments.ptmmassfix(ptmisomers_afmpos);
PTM.ptmtype = allfragments.ptmtype(ptmisomers_afmpos);
PTM.ptmfragsto = allfragments.ptmfragsto(ptmfragnums,ptmisomers_afmpos);
PTM.ptmfragstublen = allfragments.ptmfragstublen(ptmfragnums,ptmisomers_afmpos);
PTM.ptmisvar = allpepdata.ptminfo.isvarmod;
PTM.ptmisglycan = allpepdata.ptminfo.isglycan;
PTM.ptmuniind = allpepdata.ptminfo.uniind(uniptmcompind);  % PTM locator
[PTM.ptmuniind,ind] = sort(PTM.ptmuniind);
PTM.ptmseq = PTM.ptmseq(ind);
PTM.ptmmass = PTM.ptmmass(ind);
PTM.ptmmassfix = PTM.ptmmassfix(ind);
PTM.ptmtype = PTM.ptmtype(ind);
PTM.ptmfragsto  =PTM.ptmfragsto(:,ind);
PTM.ptmfragstublen = PTM.ptmfragstublen(:,ind);
PTM.ptmsize = cellfun(@(x) length(strfind(x,'{')),PTM.ptmseq);
PTM.ptmisvar = PTM.ptmisvar(ind);
PTM.ptmisglycan = PTM.ptmisglycan(ind);
PTM.isomers = cell(size(ptmisomers));
for ii = 1:size(ptmisomers,1)
    PTM.isomers(ii,:) = ptmisomers(ismember(ptmisomers(:,1),PTM.ptmseq{ii}),:);
end

%% Step 4: Start data analysis
% To maximize the efficiency and minimize resource consumption, jobs are
% distributed to each worker in candidate - spectrum pairs, rather than
% protein - msdata. The redundant information distributed to workers is
% now eliminated.

% Find out the spectra that have a proper precursor ion mass first, then
% match against a glycopeptide candidate.

% Identify the spectra to be searched.
if scoreoptions.isHCDtrigger
    % HCD trigger is special because the same ion may be fragmented
    % multiple times. In this case only one search is needed.
    if input.analyzetgt == 1
        SASSO = triggerdata.SASSO;
        SASSO(SASSO(:,2) == 0,:) = [];  % HCD THAT TRIGGERED NOTHING IS IGNORED!
        triggerdata.SASSO = SASSO;
        ms1searchscannum = SASSO(:,1);
    elseif input.analyzetgt == 2
        SASSO = triggerdata.SASSO;
        SASSO_triggerrowind = SASSO(:,2) > 0;
        SASSO_HCD_trigger = SASSO(SASSO_triggerrowind,1);
        HCD_all = scannum(strcmpi(fragmodes,'HCD'));
        ms1searchscannum = sort(setdiff(HCD_all,SASSO_HCD_trigger));
    elseif input.analyzetgt == 3
        SASSO = triggerdata.SASSO;
        SASSO_triggerrowind = SASSO(:,2) > 0;
        SASSO_HCD_trigger = SASSO(SASSO_triggerrowind,1);
        HCD_all = scannum(strcmpi(fragmodes,'HCD'));
        ms1searchscannum = sort(setdiff(HCD_all,SASSO_HCD_trigger));
    end
else
    ms1searchscannum = scannum(msdata.mslvl == 2 &...
        ismember(upper(msdata.fragmode),upper(scoreoptions.analyzefragmode)));
end

% Proteins are analyzed in batches, the number of proteins to be processed
% each time is decided by user setting.
numprotperbatch = ceil(input.doparacomp * scoreoptions.numprotperworker);
if numprotperbatch < 1
    errordlg({'Workload allocation error.',...
        'Check setting "Each worker analyze __ proteins each time"'},...
        'Check input');
    return
end
totalprotnum = length(allpepdata.glypep);
for ii = 1:ceil(totalprotnum/numprotperbatch)
    if ismember(ii,groupstodo)
        protindse = [(ii-1)*numprotperbatch+1,min(ii*numprotperbatch,length(allpepdata.glypep))];
        protbatch = allpepdata.glypep(protindse(1):protindse(2));
        FASTAbatch = allpepdata.FASTAhead(protindse(1):protindse(2));
        protind = protindse(1):protindse(2);
        if ~doparallel
            [matched_gpcomp,matched_gpmass,matched_scanind] = ...
                findms1match(precmass,scannum,protbatch,protind,PTM,...
                ms1searchscannum,scoreoptions);
        else
            dist_prot = distributed(protbatch);
            dist_protind = distributed(protind);
            spmd
                [dist_matched_gpcomp,dist_matched_gpmass,dist_matched_scanind] = ...
                    findms1match(precmass,scannum,getLocalPart(dist_prot),...
                    getLocalPart(dist_protind),PTM,ms1searchscannum,scoreoptions);
            end
            matched_gpcomp = [];
            matched_gpmass = [];
            matched_scanind = [];
            for jj = 1:length(dist_matched_gpcomp)
                matched_gpcomp = [matched_gpcomp;dist_matched_gpcomp{jj}];
                matched_gpmass = [matched_gpmass;dist_matched_gpmass{jj}];
                matched_scanind = [matched_scanind;dist_matched_scanind{jj}];
            end
            clear dist_*
        end

        if ~isempty(statusreporthandles)
            analytime = toc;
            if scoreoptions.presearch == 1
                statusstr = [['PRESEARCH: Group ',num2str(ii),': Protein No.',num2str(protindse(1)),...
                    ' to ',num2str(protindse(2)),' starteded, time = ',num2str(analytime),' sec.'];...
                    statusstr];
            else
                statusstr = [['MAINSEARCH: Group ',num2str(ii),': Protein No.',num2str(protindse(1)),...
                    ' to ',num2str(protindse(2)),' started, time = ',num2str(analytime),' sec.'];...
                    statusstr];
            end
            set(statusreporthandles.edit_statusreport, 'String', statusstr);
            pause(0.0001);
        end

        if input.analyzetgt == 1
            scoreoptions.proceed_override = GlycoPATConstant.N_Proceed_Override;
            result = matchspectrA(msdata,matched_gpcomp,matched_gpmass,...
                matched_scanind,protbatch,FASTAbatch,triggerdata,protind,PTM,scoreoptions);
        elseif input.analyzetgt == 2
            scoreoptions.isHCDtrigger = false;
            searchscannum_ori = scannum(msdata.mslvl == 2 &...
                ismember(upper(msdata.fragmode),upper(scoreoptions.analyzefragmode)));
            %{
            peponly_matched_scanind = find(ismember(searchscannum_ori,...
                ms1searchscannum(matched_scanind)));
            %{
            Added 11/25/2022
            keepind = ismember(matched_scanind,peponly_matched_scanind);
            matched_gpcomp = matched_gpcomp(keepind);
            matched_gpmass = matched_gpmass(keepind);
            to here
            %}
            %}
            %Removed peponly_ from matched_scanind below (used to be
            %peponly_matched_scanind
            scoreoptions.proceed_override = true;
            result = matchspectrA(msdata,matched_gpcomp,matched_gpmass,...
                matched_scanind,protbatch,FASTAbatch,triggerdata,protind,PTM,scoreoptions);
        end
        pause(5);
        if scoreoptions.presearch == 1
            savescoreresults(result,scoreoptions,input,PTM,allpepdata,triggerdata,...
                outputdir,outputfilename,protindse,'presearchsave');
        else
            savescoreresults(result,scoreoptions,input,PTM,allpepdata,triggerdata,...
                outputdir,outputfilename,protindse,'save');
        end
        if ~isempty(statusreporthandles)
            analytime = toc;
            if scoreoptions.presearch == 1
                statusstr = [['PRESEARCH: Group ',num2str(ii),': Protein No.',num2str(protindse(1)),...
                    ' to ',num2str(protindse(2)),' finished, time = ',num2str(analytime),' sec.'];...
                    [num2str(totalprotnum-protindse(2)),' remaining.'];'Saving results...';statusstr];
            else
                statusstr = [['Group ',num2str(ii),': Protein No.',num2str(protindse(1)),...
                    ' to ',num2str(protindse(2)),' finished, time = ',num2str(analytime),' sec.'];...
                    [num2str(totalprotnum-protindse(2)),' remaining.'];'Saving results...';statusstr];
            end
            set(statusreporthandles.edit_statusreport, 'String', statusstr);
            pause(0.0001);
        end
    end
end
end